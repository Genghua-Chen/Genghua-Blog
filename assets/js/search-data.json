{
  
    
        "post0": {
            "title": "Input Data",
            "content": "import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline . df1 = pd.read_csv(&quot;/Users/genghua/Desktop/Courses/Python/Final/archive/Admission_Predict.csv&quot;) . df1.head() . Serial No. GRE Score TOEFL Score University Rating SOP LOR CGPA Research Chance of Admit . 0 | 1 | 337 | 118 | 4 | 4.5 | 4.5 | 9.65 | 1 | 0.92 | . 1 | 2 | 324 | 107 | 4 | 4.0 | 4.5 | 8.87 | 1 | 0.76 | . 2 | 3 | 316 | 104 | 3 | 3.0 | 3.5 | 8.00 | 1 | 0.72 | . 3 | 4 | 322 | 110 | 3 | 3.5 | 2.5 | 8.67 | 1 | 0.80 | . 4 | 5 | 314 | 103 | 2 | 2.0 | 3.0 | 8.21 | 0 | 0.65 | . Data Cleaning . #Check null value datac = df1.isnull().sum() datac . Serial No. 0 GRE Score 0 TOEFL Score 0 University Rating 0 SOP 0 LOR 0 CGPA 0 Research 0 Chance of Admit 0 dtype: int64 . D = df1.drop(&#39;Serial No.&#39;, axis=&#39;columns&#39;) D . GRE Score TOEFL Score University Rating SOP LOR CGPA Research Chance of Admit . 0 | 337 | 118 | 4 | 4.5 | 4.5 | 9.65 | 1 | 0.92 | . 1 | 324 | 107 | 4 | 4.0 | 4.5 | 8.87 | 1 | 0.76 | . 2 | 316 | 104 | 3 | 3.0 | 3.5 | 8.00 | 1 | 0.72 | . 3 | 322 | 110 | 3 | 3.5 | 2.5 | 8.67 | 1 | 0.80 | . 4 | 314 | 103 | 2 | 2.0 | 3.0 | 8.21 | 0 | 0.65 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | . 395 | 324 | 110 | 3 | 3.5 | 3.5 | 9.04 | 1 | 0.82 | . 396 | 325 | 107 | 3 | 3.0 | 3.5 | 9.11 | 1 | 0.84 | . 397 | 330 | 116 | 4 | 5.0 | 4.5 | 9.45 | 1 | 0.91 | . 398 | 312 | 103 | 3 | 3.5 | 4.0 | 8.78 | 0 | 0.67 | . 399 | 333 | 117 | 4 | 5.0 | 4.0 | 9.66 | 1 | 0.95 | . 400 rows × 8 columns . df = D.rename(columns={&#39;SOP&#39;: &#39;Statement of Purpose&#39;, &#39;CGPA&#39;: &#39;GPA&#39;, &#39;LOR &#39;: &#39;Letter of Recommendation&#39;, &#39;Chance of Admit &#39;: &#39;Chance of Admit&#39;}) df . GRE Score TOEFL Score University Rating Statement of Purpose Letter of Recommendation GPA Research Chance of Admit . 0 | 337 | 118 | 4 | 4.5 | 4.5 | 9.65 | 1 | 0.92 | . 1 | 324 | 107 | 4 | 4.0 | 4.5 | 8.87 | 1 | 0.76 | . 2 | 316 | 104 | 3 | 3.0 | 3.5 | 8.00 | 1 | 0.72 | . 3 | 322 | 110 | 3 | 3.5 | 2.5 | 8.67 | 1 | 0.80 | . 4 | 314 | 103 | 2 | 2.0 | 3.0 | 8.21 | 0 | 0.65 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | . 395 | 324 | 110 | 3 | 3.5 | 3.5 | 9.04 | 1 | 0.82 | . 396 | 325 | 107 | 3 | 3.0 | 3.5 | 9.11 | 1 | 0.84 | . 397 | 330 | 116 | 4 | 5.0 | 4.5 | 9.45 | 1 | 0.91 | . 398 | 312 | 103 | 3 | 3.5 | 4.0 | 8.78 | 0 | 0.67 | . 399 | 333 | 117 | 4 | 5.0 | 4.0 | 9.66 | 1 | 0.95 | . 400 rows × 8 columns . Data Analysis . df.describe().loc[[&#39;mean&#39;, &#39;min&#39;, &#39;max&#39;]] . GRE Score TOEFL Score University Rating Statement of Purpose Letter of Recommendation GPA Research Chance of Admit . mean | 316.8075 | 107.41 | 3.0875 | 3.4 | 3.4525 | 8.598925 | 0.5475 | 0.72435 | . min | 290.0000 | 92.00 | 1.0000 | 1.0 | 1.0000 | 6.800000 | 0.0000 | 0.34000 | . max | 340.0000 | 120.00 | 5.0000 | 5.0 | 5.0000 | 9.920000 | 1.0000 | 0.97000 | . fig, ax = plt.subplots(figsize=(5,5)) df[&#39;University Rating&#39;].value_counts().plot.pie(explode = [0.1,0.1,0.1,0.1,0.1], autopct=&#39;%1.1f%%&#39;, shadow = True) ax.set_title(&#39;University Rating&#39;) ax.set_ylabel(&#39; &#39;) plt.show() . df[[&#39;GPA&#39;, &#39;University Rating&#39;]].boxplot(by=&#39;University Rating&#39;, figsize=(10,6)) plt.title(&#39;GPA vs. University Rating&#39;) plt.xlabel(&#39;University Rating&#39;) plt.ylabel(&#39;GPA&#39;) plt.show() . Quesiton 1: What will increase the chances of admission? . Question 2: Does the student who is academically good, also doing well in GRE and TOEFL? . sns.pairplot(data = df,vars=[&quot;GRE Score&quot;, &quot;TOEFL Score&quot;, #&quot;University Rating&quot;, &quot;Statement of Purpose&quot;, &quot;Letter of Recommendation&quot;, &quot;GPA&quot;, #&quot;Research&quot;, &quot;Chance of Admit&quot;]) plt.show() . Question 3: Does research paper really having a good impact in admission? . fig, ax = plt.subplots(figsize=(5,5)) df[&#39;Research&#39;].value_counts().plot.pie(explode = [0, 0.1],autopct=&#39;%1.1f%%&#39;, shadow = True) ax.set_title(&#39;Students Research&#39;) ax.set_ylabel(&#39; &#39;) plt.show() #categorical plot sns.catplot(x= &#39;Research&#39;,y = &#39;Chance of Admit&#39;, data =df) plt.show() #Scatter plot(no need) # fig, ax = plt.subplots() # a = ax.scatter(df[&#39;Research&#39;], # df[&#39;Chance of Admit&#39;]) # ax.set_xlabel(&quot;Research&quot;) # ax.set_ylabel(&quot;Chance of Admit&quot;) # plt.show() . Question 4: Who applied to the top University? . df2= df[df[&#39;University Rating&#39;]== 5] df2.describe().loc[[&#39;mean&#39;, &#39;min&#39;, &#39;max&#39;]] . GRE Score TOEFL Score University Rating Statement of Purpose Letter of Recommendation GPA Research Chance of Admit . mean | 328.333333 | 113.666667 | 5.0 | 4.5 | 4.358333 | 9.291167 | 0.866667 | 0.888167 | . min | 303.000000 | 103.000000 | 5.0 | 3.0 | 3.000000 | 8.480000 | 0.000000 | 0.610000 | . max | 340.000000 | 120.000000 | 5.0 | 5.0 | 5.000000 | 9.910000 | 1.000000 | 0.970000 | . s = pd.Series([0.000001,0.000001,0.000001,0.000001], index = [1,1.5,2,2.5]) #Statement of Purpose df3 = df2[&#39;Statement of Purpose&#39;].value_counts().sort_index() df4 = df3.append(s) #Letter of Recommendation df5 = df2[&#39;Letter of Recommendation&#39;].value_counts().sort_index() df6 = df5.append(s) . # Histogram for Statement of Purpose df4.sort_index().plot(kind=&#39;bar&#39;,figsize=(14,6), color = &#39;g&#39;) # plt.xlim =0 plt.title(&#39;Statement of Purpose with 5 University Rating&#39;) plt.xlabel(&#39;Statement of Purpose&#39;) plt.ylabel(&#39;Count&#39;) plt.show() # Histogram for Letter of Recommendation df6.sort_index().plot(kind=&#39;bar&#39;, figsize=(14,6)) plt.title(&#39;Letter of Recommendation with 5 University Rating&#39;) plt.xlabel(&#39;Letter of Recommendation&#39;) plt.ylabel(&#39;Count&#39;) plt.show() . # GPA vs. Chance of Admit fig, ax = plt.subplots(figsize = (10,5)) ax.scatter(df2[&#39;Chance of Admit&#39;], df2[&#39;GPA&#39;]) ax.set_xlabel(&quot;Chance of Admit&quot;) ax.set_ylabel(&quot;GPA&quot;) plt.show() #GRE Score vs. Chance of Admit fig, ax = plt.subplots(figsize = (10,5)) ax.scatter(df2[&#39;Chance of Admit&#39;], df2[&#39;GRE Score&#39;]) ax.set_xlabel(&quot;Chance of Admit&quot;) ax.set_ylabel(&quot;GRE Score&quot;) plt.show() . Conclusion . # corr # Example # &gt;&gt;&gt; corr = np.corrcoef(np.random.randn(10, 200)) # &gt;&gt;&gt; mask = np.zeros_like(corr) # &gt;&gt;&gt; mask[np.triu_indices_from(mask)] = True # &gt;&gt;&gt; with sns.axes_style(&quot;white&quot;): # ... f, ax = plt.subplots(figsize=(7, 5)) # ... ax = sns.heatmap(corr, mask=mask, vmax=.3, square=True) corr = df.corr() mask = np.zeros_like(corr) mask[np.triu_indices_from(mask)] = True with sns.axes_style(&quot;white&quot;): f, ax = plt.subplots(figsize=(15, 15)) ax = sns.heatmap(corr,mask=mask,square=True, annot=True,linewidths=.8,cmap=&quot;YlGnBu&quot;) #Last row cut in half of heatmap plot ax.set_ylim(8,0) .",
            "url": "https://genghua-chen.github.io/Genghua-Blog/2021/03/26/Graduate_Admission.html",
            "relUrl": "/2021/03/26/Graduate_Admission.html",
            "date": " • Mar 26, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://genghua-chen.github.io/Genghua-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://genghua-chen.github.io/Genghua-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://genghua-chen.github.io/Genghua-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://genghua-chen.github.io/Genghua-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}